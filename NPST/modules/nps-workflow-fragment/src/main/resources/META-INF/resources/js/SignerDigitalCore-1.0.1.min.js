var sdWebServerUrl = "https://dsc.npstrust.net";
var sdWebServerAuthTokenByUserPortalUrl = "/o/dsc/getAuthToken";

function CSDH() {
    sdHub.connectionState != "Connected" && sdHub.start().then(() => sdHub.invoke("GetConnectionId").then(n => {
        sdHubConnectionId = n, sdHubErrMsg = "", console.log("SignerDigitalHub Connected. ConnectionId: " + sdHubConnectionId)
    })).catch(n => {
        sdHubErrMsg = n, console.log("Error in Connect to SignerDigitalHub(): " + n), sdHubReconnectEveryNSeconds > 0 && setTimeout(() => CSDH(), sdHubReconnectEveryNSeconds * 1e3)
    })
}

function GSDAT() {
    return new Promise((n, t) => {
        const i = new XMLHttpRequest;
        i.open("GET", sdWebServerAuthTokenByUserPortalUrl);
        i.onload = () => {
            if (i.status === 200) {
                var r = JSON.parse(i.response);
                r.isSuccess ? n(r.txnOutcome) : (console.log(r.txnOutcome), t(r.txnOutcome))
            } else t(Error(i.responseText))
        };
        i.onerror = n => t(Error(`Network Error: ${n}`));
        i.send()
    })
}

function isExtensionInstalled() {
    return typeof SignerDigital == "undefined" ? !1 : !0
}
var sdHub, sdHubErrMsg, sdHubReconnectEveryNSeconds = 30,
    sdHubConnectionId, sdWebServerUrl, sdWebServerAuthTokenByUserPortalUrl, hubUrl;
try {
    hubUrl = sdWebServerUrl + "/SignerDigitalHub";
    sdHub = (new signalR.HubConnectionBuilder).withUrl(hubUrl, {
        accessTokenFactory: GSDAT
    }).withAutomaticReconnect().configureLogging(signalR.LogLevel.Information).build();
    CSDH()
} catch (err) {
    sdHubErrMsg = err
}
sdHub.onreconnected(n => {
    sdHubConnectionId = n, sdHubErrMsg = ""
});
sdHub.onclose(n => {
    alert("Connection to Signer.Digital Hub lost due to error " + n + "\nTry refreshing this page to restart the connection.")
});
sdHub.on("SignPdfHashAndReturnSignToHub", function(n, t, i = "", r = "SHA256") {
    var u = "";
    u = i != "" ? i : $("#CertThumbPrint").val();
    SignerDigital.signPdfHash(n, u, r).then(function(n) {
        sdHub.invoke("SignedDataFromClientToServer", n, t).catch(n => console.error(n))
    }, function(n) {
        sdHub.invoke("SignedDataFromClientToServer", n.message, t).catch(n => console.error(n));
        NotifyError(n.message)
    })
});